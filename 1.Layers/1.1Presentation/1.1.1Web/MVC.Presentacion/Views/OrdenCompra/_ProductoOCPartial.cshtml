
@using System.Web.UI.WebControls;
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

@Html.DevExpress().GridView(settings =>
{
    settings.Name = "gridview";
    settings.KeyFieldName = "IdProducto";
    settings.CallbackRouteValues = new { Controller = "Editing", Action = "ProductoOCPartialUpdate" };
    settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Editing", Action = "BatchEditingUpdateModel" };

    settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
    settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
    settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;
    settings.ClientSideEvents.BatchEditEndEditing = "OnBatchEditEndEditing";
    settings.Styles.Table.CssClass = "table";
    settings.Columns.Add(c =>
    {
        c.FieldName = "ProductoServicioTipo";
        c.Caption = "Tipo";
        c.Width = Unit.Percentage(20);
        c.Settings.AllowSort = DefaultBoolean.False;
        c.EditFormSettings.Visible = DefaultBoolean.False;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "Producto";
        c.Caption = "Producto";
        c.Width = Unit.Percentage(20);
        c.Settings.AllowSort = DefaultBoolean.False;
        c.EditFormSettings.Visible = DefaultBoolean.False;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "CantidadAComprar";
        c.Caption = "Requeridos";
        c.Width = Unit.Percentage(10);
        c.Settings.AllowSort = DefaultBoolean.False;
        c.Settings.ShowEditorInBatchEditMode = false;
        c.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
        c.ReadOnly = true;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "UnidadMedida";
        c.Caption = "Unidad";
        c.Width = Unit.Percentage(20);
        c.Settings.AllowSort = DefaultBoolean.False;

        c.EditFormSettings.Visible = DefaultBoolean.False;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "Aplicacion";
        c.Caption = "Detalle";
        c.Width = Unit.Percentage(20);
        c.Settings.AllowSort = DefaultBoolean.False;

        c.EditFormSettings.Visible = DefaultBoolean.False;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "CentroCosto";
        c.Caption = "Centro Costo";
        c.Width = Unit.Percentage(20);
        c.Settings.AllowSort = DefaultBoolean.False;

        c.EditFormSettings.Visible = DefaultBoolean.False;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "IdCuentaContable";
        c.Caption = "Cuenta Contable";
        c.Settings.AllowSort = DefaultBoolean.False;
        c.EditorProperties().ComboBox(p =>
        {
            p.TextField = "Descripcion";
            p.ValueField = "IdCuentaContable";
            p.ValueType = typeof(int);
            p.DataSource = ViewBag.CuentasContables;
        });
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "IdProveedor";
        c.Caption = "Proveedor";
        c.Settings.AllowSort = DefaultBoolean.False;
        c.EditorProperties().ComboBox(p =>
        {
            p.TextField = "NombreComercial";
            p.ValueField = "IdProveedor";
            p.ValueType = typeof(int);
            p.DataSource = ViewBag.Proveedores;
        });
    });
    settings.Columns.Add("Precio");
    settings.Columns.Add("Descuento");
    settings.Columns.Add(c =>
    {
        c.FieldName = "IVA";
        c.Caption = "IVA";
        c.Settings.AllowSort = DefaultBoolean.False;
        c.EditorProperties().ComboBox(p =>
        {
            p.TextField = "Text";
            p.ValueField = "Value";
            p.ValueType = typeof(int);
            p.DataSource = ViewBag.IVAs;
        });
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "IEPS";
        c.Caption = "IEPS";
        c.Settings.AllowSort = DefaultBoolean.False;
        c.EditorProperties().ComboBox(p =>
        {
            p.TextField = "Text";
            p.ValueField = "Value";
            p.ValueType = typeof(int);
            p.DataSource = ViewBag.IEPs;
        });
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "Importe";
        c.Settings.ShowEditorInBatchEditMode = false;
        c.Settings.AllowSort = DefaultBoolean.False;
        c.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
        c.ReadOnly = true;
    });
    //settings.CustomUnboundColumnData = (s, e) =>
    //{
    //    if (e.Column.FieldName == "Importe")
    //    {

    //        decimal precio = Convert.ToDecimal(e.GetListSourceFieldValue("Precio"));
    //        decimal cantidad = Convert.ToDecimal(e.GetListSourceFieldValue("CantidadAComprar"));
    //        decimal descuento = ((precio * cantidad) * Convert.ToDecimal(e.GetListSourceFieldValue("Descuento")));
    //        decimal subtotal = (precio * cantidad) - (descuento);
    //        decimal iva = ((subtotal) * (Convert.ToDecimal(e.GetListSourceFieldValue("IVA")) / 100));
    //        decimal ieps = ((subtotal) * (Convert.ToDecimal(e.GetListSourceFieldValue("IEPS")) / 100));
    //        decimal total = subtotal + iva + ieps;
    //        e.Value = total;
    //    };
    //};
    settings.CellEditorInitialize = (s, e) =>
    {
        ASPxEdit editor = (ASPxEdit)e.Editor;
        editor.ValidationSettings.Display = Display.None;
    };
    settings.ClientSideEvents.BeginCallback = "OnBeginGridCallback";

}).Bind(Model).GetHtml()
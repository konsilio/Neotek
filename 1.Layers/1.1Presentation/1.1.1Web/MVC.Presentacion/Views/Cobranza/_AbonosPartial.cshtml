@model List<MVC.Presentacion.Models.Cobranza.CargosModel>

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "Abonos";
        settings.CallbackRouteValues = new { Controller = "Cobranza", Action = "AbonosPartial" };
        settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Cobranza", Action = "AbonosPartialUpdate" };

        settings.KeyFieldName = "IdCargo";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = false;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
        settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
        settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;
        settings.ClientSideEvents.BatchEditEndEditing = "OnBatchEditEndEditing";
        settings.Styles.Table.CssClass = "table";
        
        settings.Columns.Add(c =>
        {
            c.FieldName = "IdCargo";
            c.Caption = "#";
            c.Width = System.Web.UI.WebControls.Unit.Percentage(20);
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Ticket";
            c.Caption = "Ticket";
            c.Width = System.Web.UI.WebControls.Unit.Percentage(20);
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "TotalCargo";
            c.Caption = "Importe";
            c.Width = System.Web.UI.WebControls.Unit.Percentage(10);
            c.Settings.AllowSort = DefaultBoolean.False;
            c.Settings.ShowEditorInBatchEditMode = false;
            c.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
            c.ReadOnly = true;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "TotalAbonos";
            c.Caption = "Abonado";
            c.Width = System.Web.UI.WebControls.Unit.Percentage(20);
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "TotalAbonos";
            c.Caption = "Saldo insoluto";
            c.Width = System.Web.UI.WebControls.Unit.Percentage(20);
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "FechaRegistro";
            c.Caption = "Fecha Abono";
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "Descripcion";
                p.ValueField = "IdCentroCosto";
                p.ValueType = typeof(int);
                p.DataSource = ViewBag.CentrosCosto;
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "IdCuentaContable";
            c.Caption = "Cuenta Contable";
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "Descripcion";
                p.ValueField = "IdCuentaContable";
                p.ValueType = typeof(int);
                p.DataSource = ViewBag.CuentasContables;
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Precio";
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditorProperties().SpinEdit(p =>
            {
                p.DisplayFormatString = "c";
                p.DisplayFormatInEditMode = true;
                p.MinValue = 0;
                p.MaxValue = 1000000;
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Descuento";
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditorProperties().SpinEdit(p =>
            {
                p.DisplayFormatString = "{0} %";
                p.MinValue = 0;
                p.MaxValue = 100;
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "IVA";
            c.Caption = "IVA";
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "Text";
                p.ValueField = "Value";
                p.ValueType = typeof(int);
                p.DataSource = ViewBag.IVAs;
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "IEPS";
            c.Caption = "IEPS";
            c.Settings.AllowSort = DefaultBoolean.False;
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "Text";
                p.ValueField = "Value";
                p.ValueType = typeof(int);
                p.DataSource = ViewBag.IEPs;
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Importe";
            c.Settings.ShowEditorInBatchEditMode = false;
            c.Settings.AllowSort = DefaultBoolean.False;
            c.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
            c.ReadOnly = true;
            c.EditorProperties().SpinEdit(p =>
            {
                p.DisplayFormatString = "c";
            });
        });
        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.None;
        };
        settings.ClientSideEvents.BeginCallback = "OnBeginGridCallback";
    });
}
@grid.Bind(Model).GetHtml()
